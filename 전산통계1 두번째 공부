# 데이터 병합
height<-data.frame(id=c(1,2,3),h=c(180,175,155))
height
weight<-data.frame(id=c(1,2,4),
                   w=c(80,75,49))
weight
user<-merge(height,weight,by='id')#by ->뭘 기준으로 병합할건지,교집합으로만
user
?merge
(user2<-merge(height,weight,by="id"))

(user1<-merge(height,weight,by='id',all.x=TRUE))#x=height의자료를 다넣어줘라.
(user3<-merge(height,weight,by='id',all.y=TRUE))#y=weight의자료를 다넣어줘라.
user3
user4<-merge(height,weight,by='id',all=T)#x,y상관없이 다 넣어줘라잉~
user4
height<-data.frame(id1=c(1,2,3),h=c(180,175,155))
height
weight<-data.frame(id2=c(1,2,4),
                   w=c(80,75,49))
height
weight
###복습해볼것.
user1<-merge(height,weight,by.x='id1',by.y='id2',all.x=TRUE)#x=height의자료를 다넣어줘라.
user1
user3<-merge(height,weight,by.x='id1',by.y='id2',all.y=TRUE)#y=weight의자료를 다넣어줘라.
user3
user4<-merge(height,weight,by.x='id1',by.y='id2',all=T)
user4
###

#키보드 입력
num<-scan()
num
?scan

name<-scan(what=character()) #캐릭터형으로 저장하고싶다.
name
df<-data.frame()
df<-edit(df)
library(regbook)
# cat 함수 
x<-10
y<-20
print(x)
print(y)
cat("x*y=",x*y,sep="")
cat("x",x,";y=",y,"; x*y=",x*y,sep="")
# 로컬 파일 읽기
getwd()
setwd("/Users/seph/전산통계1/데이터 자료/part1")
setwd(readclipboard())
student<-read.table("student.txt")
names(student)<-c("번호","이름","키","몸무게")
student<-read.table("student1.txt",header=T,encoding="UTF-8")#다음시간.
# 웹 문서 읽기
install.packages("XML")
install.packages("httr")
library(XML)
library(httr)
ur<-"https://ssti.org/blog/useful-stats-capita-personal-income-state-2010-2015"
get_url<-GET(ur)
con<-rawToChar(get_url$content)
readHTMLTable(con)
library(stringr)
str_extract_all(con,"<table")
str_locate_all(con,"<table")
str_sub(con,38562,38662)
html_cont<-readHTMLTable(con)
html_cont<-as.data.frame(readHTMLTable(con))#데이타프레임
class(html_cont)
# 조건문
# if 문 only
score<-85
result<-"B"
if(score>80) {result<-"A"}
score
result
cat("당신의 학점은",result,"(",score,")입니다.",sep="")
# if ~ else if
score<-40
if (score>=90) {result<-"A"
} else if (score>=80) {result<-"B"
} else if (score>=70) {result<-"C"
} else {result<-"F"}




# if else문 
score<- c(100, 85, 70)
names(score)<-c("james","jane","thomas")
score
ifelse(score>=90,"A","B")
#switch 문
input<-"name"
switch(input,id="hong",pw="1234",age=40,name="James")

#which
no<-1:5
name<-c("james","jane","thomas","minsu","seph")
score<-c(70,85,75,90,100)
exam<-data.frame(학번=no,이름=name,성적=score)
exam$학번
exam[which(exam$학번==5),]

# 반복문(for 문)

d<-numeric()
for(i in 1:10){
  d[i]<-i*10
  cat(i,d[i],"\n")
}

# 홀수값 짝수값 출력
for (i in 1:10){
  if (i%%2==0) {print(i)}
}
for (i in 1:10){
  if (i%%2==0) {cat(i," ")}
}
for (i in 1:10){
  if (i%%2==0) {next
   }else cat(i," ")
} 

score<-c(50,80) 
name<-c("james","jane")
i<-1
for (s in score){
  cat(name[i]," 점수 ", s,"\n")
  i<-i+1
}
i<-0
while (i<10){
  i<-i+1
  print(i)
}




# 로컬 파일 읽기
getwd()
setwd("/Users/seph/전산통계1/데이터 자료/part1")
student<-read.table("student.txt")
student
class(student)#글의 구조가나오지만#자료의구조
mode(student)# mode는 그안에 내용이 안나오고 리스트란형태로나옴(기본) #자료안의모드
names(student) # 키값이 나옴
colnames(student)
names(student)<-c("번호","이름","키","몸무게")
student
student1<-read.table('student1.txt',header=T,fileEncoding = "CP949", encoding = "UTF-8")
student1<-read.table(file.choose(),header=T,fileEncoding = "CP949", encoding = "UTF-8")
student1
student2<-read.table('student2.txt',header=T,fileEncoding = "CP949", encoding = "UTF-8",sep=";")
student2

student3<-read.table('student3.txt',header=T,fileEncoding = "CP949", encoding = "UTF-8",
                     na.string=c('&','-')) #두문자를 na로 보겠다 하면c써서 해놓음됨
student3
student4<-read.table('student4.txt',header=T,fileEncoding = "CP949", encoding = "UTF-8",sep=","
                     , na.strings=c("+","$","-"))
student4<-read.csv('student4.txt',header=T,fileEncoding = "CP949", encoding = "UTF-8",sep=","
                     , na.strings=c("+","$","-"))
#csv 컴마 세퍼레이트 밸류 (컴마를 기준으로하기때문에 sep=',' 을 기준삼아 할필요없다)
student4
install.packages('data.table')
library(data.table)
stock<-read.csv('stock.csv')
stock
stock<-fread('stock.csv') #이게 read보다 읽는속도 빠르다
stock
install.packages('xlsx')
install.packages('rJava')

#java
Sys.setencv(JAVA_HOME=)

write.table(student,'student_new.txt',row.names=F,quote=F)
fwrite(stock,"stock.csv")
write.xlsx(studentex,"studentex_new.xslx",row.names=F) #옵션이 뭐가있는지 기억할것.
